{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.451.19169",
      "templateHash": "6691996534442855160"
    }
  },
  "parameters": {
    "apimName": {
      "type": "string"
    },
    "apimPublisherEmail": {
      "type": "string",
      "defaultValue": "admin@contoso.com"
    },
    "apimPublisherName": {
      "type": "string",
      "defaultValue": "Contoso"
    },
    "apimPricingTier": {
      "type": "string",
      "defaultValue": "Consumption"
    },
    "apimCapacity": {
      "type": "int",
      "defaultValue": 0
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2020-12-01",
      "name": "[parameters('apimName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('apimPricingTier')]",
        "capacity": "[parameters('apimCapacity')]"
      },
      "properties": {
        "publisherEmail": "[parameters('apimPublisherEmail')]",
        "publisherName": "[parameters('apimPublisherName')]"
      }
    },
    {
      "type": "Microsoft.ApiManagement/service/policies",
      "apiVersion": "2019-01-01",
      "name": "[format('{0}/policy', parameters('apimName'))]",
      "properties": {
        "value": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <cors allow-credentials=\"false\">\r\n            <allowed-origins>\r\n                <origin>*</origin>\r\n            </allowed-origins>\r\n            <allowed-methods preflight-result-max-age=\"300\">\r\n                <method>*</method>\r\n            </allowed-methods>\r\n            <allowed-headers>\r\n                <header>*</header>\r\n            </allowed-headers>\r\n            <expose-headers>\r\n                <header>*</header>\r\n            </expose-headers>\r\n        </cors>\r\n    </inbound>\r\n    <backend>\r\n        <forward-request />\r\n    </backend>\r\n    <outbound />\r\n    <on-error />\r\n</policies>\r\n",
        "format": "rawxml"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "apiUsersTemplate",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apimName": {
            "value": "[parameters('apimName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "9637736722564901365"
            }
          },
          "parameters": {
            "apimName": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "apiName": "users",
            "apiPath": "users",
            "logicAppKeyName": "users-logic-app-sig",
            "logicAppBackendName": "usersLogicAppBackend",
            "logicAppTemplateName": "usersLogicAppBackendTemplate"
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service/properties",
              "apiVersion": "2019-01-01",
              "name": "[format('{0}/{1}', parameters('apimName'), variables('logicAppKeyName'))]",
              "properties": {
                "secret": true,
                "displayName": "[variables('logicAppKeyName')]",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.sig.value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('apimName'), variables('apiName'))]",
              "properties": {
                "displayName": "Users",
                "description": "Users API - User validation service",
                "path": "[variables('apiPath')]",
                "subscriptionRequired": false,
                "protocols": [
                  "https"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/backends",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('apimName'), variables('logicAppBackendName'))]",
              "properties": {
                "description": "[reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.name.value]",
                "resourceId": "[format('{0}{1}', environment().resourceManager, reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.logicApp.value)]",
                "url": "[reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.endpoint.value]",
                "protocol": "http"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}/get', parameters('apimName'), variables('apiName'))]",
              "properties": {
                "displayName": "Validate user",
                "method": "POST",
                "urlTemplate": "/",
                "templateParameters": [],
                "description": "Validates user",
                "responses": [
                  {
                    "statusCode": 200,
                    "description": "OK",
                    "headers": [],
                    "representations": [
                      {
                        "contentType": "application/json",
                        "sample": "{\r\n    \"summary\": \"User validated succesfully\"\r\n}"
                      }
                    ]
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', split(format('{0}/{1}', parameters('apimName'), variables('apiName')), '/')[0], split(format('{0}/{1}', parameters('apimName'), variables('apiName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/policy', format('{0}/{1}/get', parameters('apimName'), variables('apiName')))]",
              "properties": {
                "value": "<policies>\r\n    <inbound>\r\n        <base />\r\n        <set-header name=\"Ocp-Apim-Subscription-Key\" exists-action=\"delete\" />\r\n        <set-method>POST</set-method>\r\n        <rewrite-uri template=\"/manual/paths/invoke?api-version=2019-05-01&amp;sp=/triggers/manual/run&amp;sv=1.0&amp;sig={{users-logic-app-sig}}\" />\r\n        <set-backend-service backend-id=\"usersLogicAppBackend\" />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <set-header name=\"X-UserValidation-Policy-Example\" exists-action=\"override\">\r\n            <value>v1</value>\r\n        </set-header>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
                "format": "rawxml"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', split(format('{0}/{1}/get', parameters('apimName'), variables('apiName')), '/')[0], split(format('{0}/{1}/get', parameters('apimName'), variables('apiName')), '/')[1], split(format('{0}/{1}/get', parameters('apimName'), variables('apiName')), '/')[2])]",
                "[resourceId('Microsoft.ApiManagement/service/backends', split(format('{0}/{1}', parameters('apimName'), variables('logicAppBackendName')), '/')[0], split(format('{0}/{1}', parameters('apimName'), variables('logicAppBackendName')), '/')[1])]",
                "[resourceId('Microsoft.ApiManagement/service/properties', split(format('{0}/{1}', parameters('apimName'), variables('logicAppKeyName')), '/')[0], split(format('{0}/{1}', parameters('apimName'), variables('logicAppKeyName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[variables('logicAppTemplateName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01', 'full').location]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    }
                  },
                  "variables": {
                    "logicAppName": "users-handler"
                  },
                  "resources": [
                    {
                      "name": "[variables('logicAppName')]",
                      "type": "Microsoft.Logic/workflows",
                      "apiVersion": "2019-05-01",
                      "location": "[parameters('location')]",
                      "properties": {
                        "state": "Enabled",
                        "definition": {
                          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {},
                          "triggers": {
                            "manual": {
                              "type": "Request",
                              "kind": "Http",
                              "inputs": {
                                "schema": {
                                  "properties": {
                                    "address": {
                                      "properties": {
                                        "city": {
                                          "type": "string"
                                        },
                                        "country": {
                                          "type": "string"
                                        },
                                        "postalCode": {
                                          "type": "string"
                                        },
                                        "street": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "id": {
                                      "type": "integer"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "actions": {
                            "Condition": {
                              "actions": {
                                "Response": {
                                  "runAfter": {},
                                  "type": "Response",
                                  "kind": "Http",
                                  "inputs": {
                                    "body": {
                                      "summary": "User validated succesfully"
                                    },
                                    "headers": {
                                      "X-UserValidation": "1"
                                    },
                                    "statusCode": 200
                                  }
                                }
                              },
                              "runAfter": {},
                              "else": {
                                "actions": {
                                  "Response_2": {
                                    "runAfter": {},
                                    "type": "Response",
                                    "kind": "Http",
                                    "inputs": {
                                      "body": {
                                        "summary": "Validation failed"
                                      },
                                      "headers": {
                                        "X-UserValidation": "0"
                                      },
                                      "statusCode": 200
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@triggerBody()?['address']?['postalCode']",
                                      "12345"
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            }
                          },
                          "outputs": {}
                        },
                        "parameters": {}
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[variables('logicAppName')]"
                    },
                    "logicApp": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Logic/workflows', variables('logicAppName'))]"
                    },
                    "sig": {
                      "type": "string",
                      "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('logicAppName')), '/triggers/manual'), '2019-05-01').queries.sig]"
                    },
                    "endpoint": {
                      "type": "string",
                      "value": "[concat(reference(resourceId('Microsoft.Logic/workflows', variables('logicAppName'))).accessEndpoint, '/triggers')]"
                    },
                    "fullLogicAppObject": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Logic/workflows', variables('logicAppName')), '2019-05-01', 'Full')]"
                    },
                    "fullListCallbackURLObject": {
                      "type": "object",
                      "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('logicAppName')), '/triggers/manual'), '2019-05-01')]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "apiProductsTemplate",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apimName": {
            "value": "[parameters('apimName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.451.19169",
              "templateHash": "14631935383168874654"
            }
          },
          "parameters": {
            "apimName": {
              "type": "string"
            }
          },
          "functions": [],
          "variables": {
            "apiName": "products",
            "apiPath": "products",
            "logicAppKeyName": "products-logic-app-sig",
            "logicAppBackendName": "productsLogicAppBackend",
            "logicAppTemplateName": "productsLogicAppBackendTemplate"
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service/properties",
              "apiVersion": "2019-01-01",
              "name": "[format('{0}/{1}', parameters('apimName'), variables('logicAppKeyName'))]",
              "properties": {
                "secret": true,
                "displayName": "[variables('logicAppKeyName')]",
                "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.sig.value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('apimName'), variables('apiName'))]",
              "properties": {
                "displayName": "Products",
                "description": "Products API - Product validation service",
                "path": "[variables('apiPath')]",
                "subscriptionRequired": false,
                "protocols": [
                  "https"
                ],
                "value": "openapi: \"3.0.2\"\r\ninfo:\r\n  title: Products\r\n  version: \"1.0\"\r\n\r\ncomponents:\r\n  schemas:\r\n    product:\r\n      description: Product\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: integer\r\n        name:\r\n          type: string\r\n        date1:\r\n          type: string\r\n          format: date\r\n          example: \"2020-06-25\"\r\n        date2:\r\n          type: string\r\n          format: date-time\r\n          example: \"2020-07-25T12:34:56Z\"\r\n\r\npaths:\r\n  /:\r\n    get:\r\n      responses:\r\n        \"200\":\r\n          description: OK response\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/product\"\r\n",
                "format": "openapi",
                "apiType": "http"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/backends",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('apimName'), variables('logicAppBackendName'))]",
              "properties": {
                "description": "[reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.name.value]",
                "resourceId": "[format('{0}{1}', environment().resourceManager, reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.logicApp.value)]",
                "url": "[reference(resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName')), '2019-10-01').outputs.endpoint.value]",
                "protocol": "http"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('logicAppTemplateName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/apis/operations/policies",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}/get/policy', parameters('apimName'), variables('apiName'))]",
              "properties": {
                "value": "<policies>\r\n    <inbound>\r\n        <base />\r\n        <set-header name=\"Ocp-Apim-Subscription-Key\" exists-action=\"delete\" />\r\n        <set-method>POST</set-method>\r\n        <rewrite-uri template=\"/manual/paths/invoke?api-version=2019-05-01&amp;sp=/triggers/manual/run&amp;sv=1.0&amp;sig={{products-logic-app-sig}}\" />\r\n        <set-backend-service backend-id=\"productsLogicAppBackend\" />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <set-header name=\"X-Products-Policy-Example\" exists-action=\"override\">\r\n            <value>v1</value>\r\n        </set-header>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>",
                "format": "rawxml"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/backends', split(format('{0}/{1}', parameters('apimName'), variables('logicAppBackendName')), '/')[0], split(format('{0}/{1}', parameters('apimName'), variables('logicAppBackendName')), '/')[1])]",
                "[resourceId('Microsoft.ApiManagement/service/properties', split(format('{0}/{1}', parameters('apimName'), variables('logicAppKeyName')), '/')[0], split(format('{0}/{1}', parameters('apimName'), variables('logicAppKeyName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "[variables('logicAppTemplateName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName')), '2020-12-01', 'full').location]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    }
                  },
                  "variables": {
                    "logicAppName": "products-handler"
                  },
                  "resources": [
                    {
                      "name": "[variables('logicAppName')]",
                      "type": "Microsoft.Logic/workflows",
                      "apiVersion": "2019-05-01",
                      "location": "[parameters('location')]",
                      "properties": {
                        "state": "Enabled",
                        "definition": {
                          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {},
                          "triggers": {
                            "manual": {
                              "type": "Request",
                              "kind": "Http",
                              "inputs": {
                                "schema": {}
                              }
                            }
                          },
                          "actions": {
                            "Response": {
                              "runAfter": {},
                              "type": "Response",
                              "kind": "Http",
                              "inputs": {
                                "body": [
                                  {
                                    "id": 1,
                                    "name": "Product 1"
                                  },
                                  {
                                    "id": 2,
                                    "name": "Product 2"
                                  }
                                ],
                                "headers": {
                                  "Content-type": "application/json"
                                },
                                "statusCode": 200
                              }
                            }
                          },
                          "outputs": {}
                        },
                        "parameters": {}
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[variables('logicAppName')]"
                    },
                    "logicApp": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Logic/workflows', variables('logicAppName'))]"
                    },
                    "sig": {
                      "type": "string",
                      "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('logicAppName')), '/triggers/manual'), '2019-05-01').queries.sig]"
                    },
                    "endpoint": {
                      "type": "string",
                      "value": "[concat(reference(resourceId('Microsoft.Logic/workflows', variables('logicAppName'))).accessEndpoint, '/triggers')]"
                    },
                    "fullLogicAppObject": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Logic/workflows', variables('logicAppName')), '2019-05-01', 'Full')]"
                    },
                    "fullListCallbackURLObject": {
                      "type": "object",
                      "value": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', variables('logicAppName')), '/triggers/manual'), '2019-05-01')]"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
      ]
    }
  ],
  "outputs": {
    "apimGateway": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName'))).gatewayUrl]"
    }
  }
}